[%# -*- makefile -*-
#____________________________________________________________________ 
# Inserted from file: dict_template.tmpl (LCG project version)
#____________________________________________________________________ 
#  
# Author: Shaun Ashby <Shaun.Ashby@cern.ch>
# Update: 2004-03-12 10:30:42+0100
# Revision: $Id: dict_lcg_template.tmpl,v 1.2 2004/12/10 13:41:44 sashby Exp $ 
#
# Copyright: 2004 (C) Shaun Ashby
#
#--------------------------------------------------------------------
%]
# LCGDICT: create a X.cc from each X.xml. Add new sources to file list
#          and compile into shared lib for this package;
#
# ROOTDICT: create a XLinkDef.cc from each XLinkDef.h and add the sources to 
#           the file list for the package. Compile into shared library;
.PHONY: [% safepath %]_build_dict [% safepath %]_lcgdict [% safepath %]_rootdict
[% safepath %]_build_dict: [% safepath %]_lcgdict [% safepath %]_rootdict

# Variables:
LCGDICT           = $(SEAL_BASE)/src/Dictionary/DictionaryGenerator/scripts/lcgdict
ROOTCINT_BIN_DIR  = $(ROOTCORE_BASE)/root/bin
ROOTCINT          = $(ROOTCINT_BIN_DIR)/rootcint
IDINDICT          = $(LOCALTOP)/$(SCRAM_SOURCEDIR)/CARF/domain/scripts/idIndict.py

# Figure out whther we should do something here for ROOT or LCG dictionaries:
[% safepath %]_DICT_TOP          = $([% safepath %]_srcdir)
[% safepath %]_DICT             := $(notdir $(wildcard $([% safepath %]_DICT_TOP)/*_def.xml))
[% safepath %]_ROOTDICT         := $(notdir $(wildcard $([% safepath %]_DICT_TOP)/*LinkDef.h))

ifneq ($(strip $([% safepath %]_DICT)),) # If we have a classes_def.xml so we can do something

[% safepath %]_H_DICT            = classes.h
[% safepath %]_FILE_DICT         = classes_dict.cpp
[% safepath %]_FILE_ID           = classes_ids.cc
[% safepath %]_FULL_FILE_DICT    = $(addprefix $([% safepath %]_objdir)/, $([% safepath %]_FILE_DICT))
[% safepath %]_FULL_FILE_ID      = $(addprefix $([% safepath %]_objdir)/, $([% safepath %]_FILE_ID))

# Add the generated files to the list of files for this library:
[% safepath %]_dictfiles:=$([% safepath %]_FULL_FILE_DICT) $([% safepath %]_FULL_FILE_ID)

ifneq ($(strip $([% safepath %]_dictfiles)),)
.PHONY: [% safepath %]_lcgdict

[% safepath %]_files+=$([% safepath %]_dictfiles)
[% safepath %]_dictobjs+=$(addsuffix .$(OBJEXT), $(basename $([% safepath %]_dictfiles)))
# Add the generated object files to the list of object files for the library:
[% safepath %]_objs+=$([% safepath %]_dictobjs)

# The LCG dictionary rule:
[% safepath %]_lcgdict: $([% safepath %]_dictfiles) $([% safepath %]_dictobjs)

$([% safepath %]_objdir)/classes_dict.cpp: $([% safepath %]_DICT_TOP)/classes.h $([% safepath %]_DICT_TOP)/classes_def.xml 
	@echo ">> Building LCG dict from header file $< "
	@mkdir -p $(@D)
	$(LCGDICT) $([% safepath %]_DICT_TOP)/classes.h -s $([% safepath %]_DICT_TOP)/classes_def.xml -o$([% safepath %]_objdir) --deep --pool -DCMS_DICT_IMPL -D_REENTRANT -DGNU_SOURCE $([% safepath %]_CPPFLAGS)

$([% safepath %]_objdir)/classes_ids.cc: $([% safepath %]_DICT_TOP)/classes_def.xml
	@mkdir -p $(@D)
	touch $([% safepath %]_objdir)/classes_ids.cc

# The objects. Note that here, the sources are found in the object filedir (since they were generated and put there):
$([% safepath %]_objdir)/classes_dict.$(OBJEXT): $([% safepath %]_objdir)/classes_dict.cpp
	@mkdir -p $(@D)
	@echo ">> Compiling for dictionary: $< "
	$(VERB)$(CXX) -MMD  -c $([% safepath %]_CPPFLAGS) $([% safepath %]_CXXFLAGS) $([% safepath %]_CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS) $< -o $@

$([% safepath %]_objdir)/classes_ids.$(OBJEXT): $([% safepath %]_objdir)/classes_ids.cc
	@mkdir -p $(@D)
	@echo ">> Compiling for idIndict: $< "
	$(VERB)$(CXX) -MMD  -c $([% safepath %]_CPPFLAGS) $([% safepath %]_CXXFLAGS) $([% safepath %]_CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS) $< -o $@
#
else
[% safepath %]_lcgdict:
	@echo "No dictionary files to compile. Nothing to be done for lcgdict."
endif
endif

# Now the checks for ROOT dict:
ifneq ($(strip $([% safepath %]_ROOTDICT)),) # If we have a *LinkDef.h so we can do something

[% safepath %]_ROOTFILE_DICT     = $(patsubst %.h, %Dict.cc, $([% safepath %]_ROOTDICT))
[% safepath %]_ROOTFILE_DICT_H   = $(patsubst %.h, %Dict.h, $([% safepath %]_ROOTDICT))
[% safepath %]_ROOTFILE_DICT_OBJ = $(patsubst %Dict.cc, %Dict.$(OBJEXT), $([% safepath %]_ROOTFILE_DICT))
[% safepath %]_ROOTFULL_FILE_DICT = $(addprefix $([% safepath %]_objdir)/, $([% safepath %]_ROOTFILE_DICT))
[% safepath %]_ROOTFULL_FILE_DICT_H   = $(addprefix $([% safepath %]_objdir)/, $([% safepath %]_ROOTFILE_DICT_H))
[% safepath %]_ROOTFULL_FILE_DICT_OBJ = $(addprefix $([% safepath %]_objdir)/, $([% safepath %]_ROOTFILE_DICT_OBJ))

[% safepath %]_rdictfiles:=$([% safepath %]_ROOTFULL_FILE_DICT)
[% safepath %]_files+=$([% safepath %]_rdictfiles)
[% safepath %]_rdictobjs+=$(addsuffix .$(OBJEXT), $(basename $([% safepath %]_rdictfiles)))

# Add the generated object files to the list of object files for the library:
[% safepath %]_objs+=$([% safepath %]_rdictobjs)

ifneq ($(strip $([% safepath %]_rdictfiles)),)
# The ROOT dictionary rule:
[% safepath %]_rootdict: $([% safepath %]_ROOTFULL_FILE_DICT) $([% safepath %]_ROOTFULL_FILE_DICT_OBJ)

$([% safepath %]_objdir)/%Dict.cc: $([% safepath %]_DICT_TOP)/%.h
	@mkdir -p $(@D)
	$(ROOTCINT) -f $@ -c -p -DGNU_SOURCE $([% safepath %]_CPPFLAGS) $<
	mv $([% safepath %]_ROOTFULL_FILE_DICT_H) $([% safepath %]_ROOTFULL_FILE_DICT_H).base
	cat $< $([% safepath %]_ROOTFULL_FILE_DICT_H).base > $([% safepath %]_ROOTFULL_FILE_DICT_H)
	rm -f $([% safepath %]_ROOTFULL_FILE_DICT_H).base

$([% safepath %]_ROOTFULL_FILE_DICT_OBJ): $([% safepath %]_ROOTFULL_FILE_DICT)
	@mkdir -p $(@D)
	@echo ">> Compiling for root dictionary: $< "
	$(VERB)$(CXX) -MMD -c $([% safepath %]_CPPFLAGS) $([% safepath %]_CXXFLAGS) $([% safepath %]_CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS) $< -o $@
else
[% safepath %]_rootdict:
	@echo "No dictionary files to compile. Nothing to be done for rootdict."
endif
endif
# End of dict stub
